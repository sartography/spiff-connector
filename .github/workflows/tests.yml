name: Tests

on: [push]

# jobs:
#   build:
#
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: ["3.11", "3.12", "3.13"]
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v4
#         with:
#           python-version: ${{ matrix.python-version }}
#       - name: cache poetry install
#         uses: actions/cache@v2
#         with:
#           path: ~/.local
#           key: poetry-1.6.1
#       - uses: snok/install-poetry@v1
#         with:
#           version: 1.8.1
#           virtualenvs-create: true
#           virtualenvs-in-project: true
#           installer-parallel: true
#       - name: cache deps
#         id: cache-deps
#         uses: actions/cache@v2
#         with:
#           path: .venv
#           key: pydeps-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
#       - run: poetry install --no-interaction --no-root
#         if: steps.cache-deps.outputs.cache-hit != 'true'
#       - run: poetry install --no-interaction
#       - run: poetry run mypy .
#       - run: poetry run ruff .
#       - run: poetry run pytest
#
# name: test
#
# on: pull_request

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip
      - run: python -m pip install ruff
      - run: |
          ruff --version && ruff check .
  test:
    needs: linting
    strategy:
      fail-fast: true
      matrix:
        python-version: [ "3.11", "3.12", "3.13" ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install library
        run: poetry install --no-interaction
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/
